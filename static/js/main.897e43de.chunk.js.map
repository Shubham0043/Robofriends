{"version":3,"sources":["serviceWorker.js","Card.js","Cardlist.js","Searchbox.js","Scroll.js","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Cards","props","className","alt","src","id","name","email","Cardlist","robots","map","user","i","Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","fetch","response","json","users","filterRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.897e43de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Cards = (props) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green br3 pa3 dib ma3 grow bw2 shadow3'  >\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Cards;\r\n","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst Cardlist= ({robots}) => {\r\n \t\t\t\treturn(\t\t\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\t\treturn( <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox=({searchfield,searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input className='pa2 ba b--green bg-lightest-blue'\r\n\t\t\t type=\"search\"\r\n\t\t\t  placeholder=\"Search Robots\"\r\n\t\t\t   onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll= props =>\r\n{\r\n\treturn(\r\n\t\t\t<div style={{overflowY: 'Scroll', border: 'solid black 1px', height:'800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t\t);\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Cardlist from './Cardlist';\r\nimport Searchbox from './Searchbox';\r\nimport './App.css';\r\nimport  Scroll from './Scroll'\r\nclass App extends Component {\r\n\t\r\n\tconstructor() {\r\n\t \tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response =>{\r\n\t\treturn response.json();\r\n\t})\r\n\t.then(users =>{\r\n\t\tthis.setState({robots: users})\r\n\t});\r\n\t\r\n}\r\n\tonSearchChange= (event =>{\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t})\r\n\trender(){\r\n\t\tconst filterRobots=this.state.robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn <h1>Loading...</h1>\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn(\r\n\t\t\t\t<div className=' tc '>\r\n\t\t\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t\t\t\t<Searchbox searchChange= {this.onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<Cardlist robots={filterRobots} />\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t}\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}